openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - App
  /user:
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnUserDto"
        "400":
          description: Bad request. Body does not contain required fields
      summary: Create user
      tags: &a1
        - User
    get:
      operationId: UsersController_findAll
      parameters: []
      responses:
        "200":
          description: The list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReturnUserDto"
      summary: Get all users
      tags: *a1
  /user/{id}:
    get:
      operationId: UsersController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: The user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnUserDto"
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: User not found
      summary: Get user by id
      tags: *a1
    put:
      operationId: UsersController_update
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        "200":
          description: The user has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnUserDto"
        "400":
          description: Bad request. id is invalid (not uuid)
        "403":
          description: Old password is wrong
        "404":
          description: User not found
      summary: Update user password
      tags: *a1
    delete:
      operationId: UsersController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The user has been deleted
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: User not found
      summary: Delete user
      tags: *a1
  /artist:
    post:
      operationId: ArtistsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "201":
          description: The artist has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseArtistDto"
        "400":
          description: Bad request. Body does not contain required fields
      summary: Create artist
      tags: &a2
        - Artist
    get:
      operationId: ArtistsController_findAll
      parameters: []
      responses:
        "200":
          description: The list of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseArtistDto"
      summary: Get all artists
      tags: *a2
  /artist/{id}:
    get:
      operationId: ArtistsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: The artist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseArtistDto"
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: Artist not found
      summary: Get single artist by id
      tags: *a2
    put:
      operationId: ArtistsController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "200":
          description: The artist has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseArtistDto"
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: Artist not found
      summary: Update artist
      tags: *a2
    delete:
      operationId: ArtistsController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The artist has been deleted
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: Artist not found
      summary: Delete artist
      tags: *a2
  /track:
    post:
      operationId: TracksController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "201":
          description: The track has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseTrackDto"
        "400":
          description: Bad request. Body does not contain required fields
      summary: Create track
      tags: &a3
        - Track
    get:
      operationId: TracksController_findAll
      parameters: []
      responses:
        "200":
          description: The list of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseTrackDto"
      summary: Get all tracks
      tags: *a3
  /track/{id}:
    get:
      operationId: TracksController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: The track
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseTrackDto"
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: Track not found
      summary: Get single track by id
      tags: *a3
    put:
      operationId: TracksController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "200":
          description: The track has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseTrackDto"
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: Track not found
      summary: Update track
      tags: *a3
    delete:
      operationId: TracksController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The track has been deleted
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: Track not found
      summary: Delete track
      tags: *a3
  /album:
    post:
      operationId: AlbumsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "201":
          description: The album has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseAlbumDto"
        "400":
          description: Bad request. Body does not contain required fields
      summary: Create album
      tags: &a4
        - Album
    get:
      operationId: AlbumsController_findAll
      parameters: []
      responses:
        "200":
          description: The list of albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseAlbumDto"
      summary: Get all albums
      tags: *a4
  /album/{id}:
    get:
      operationId: AlbumsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: The album
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseAlbumDto"
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: Album not found
      summary: Get single album by id
      tags: *a4
    put:
      operationId: AlbumsController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "200":
          description: The album has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseAlbumDto"
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: Album not found
      summary: Update album
      tags: *a4
    delete:
      operationId: AlbumsController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The album has been deleted
        "400":
          description: Bad request. id is invalid (not uuid)
        "404":
          description: Album not found
      summary: Delete album
      tags: *a4
  /favs:
    get:
      operationId: FavoritesController_findAll
      parameters: []
      responses:
        "200":
          description: The list of favorites
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoritesResponseDto"
      summary: Get all favorites
      tags: &a5
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        "201":
          description: Track added to favorites
        "400":
          description: Bad request. trackId is invalid (not uuid)
        "422":
          description: Track not found
      summary: Add track to favorites
      tags: *a5
    delete:
      operationId: FavoritesController_removeTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: Track removed from favorites
        "400":
          description: Bad request. trackId is invalid (not uuid)
        "404":
          description: Track not found in favorites
      summary: Delete track from favorites
      tags: *a5
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        "201":
          description: Album added to favorites
        "400":
          description: Bad request. albumId is invalid (not uuid)
        "422":
          description: Album not found
      summary: Add album to favorites
      tags: *a5
    delete:
      operationId: FavoritesController_removeAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: Album removed from favorites
        "400":
          description: Bad request. albumId is invalid (not uuid)
        "404":
          description: Album not found in favorites
      summary: Delete album from favorites
      tags: *a5
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        "201":
          description: Artist added to favorites
        "400":
          description: Bad request. artistId is invalid (not uuid)
        "422":
          description: Artist not found
      summary: Add artist to favorites
      tags: *a5
    delete:
      operationId: FavoritesController_removeArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: Artist removed from favorites
        "400":
          description: Bad request. artistId is invalid (not uuid)
        "404":
          description: Artist not found in favorites
      summary: Delete artist from favorites
      tags: *a5
info:
  title: Home Library Service
  description: The Home Library API description
  version: "1.0"
  contact: {}
tags:
  - name: music
    description: ""
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    ReturnUserDto:
      type: object
      properties: {}
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    CreateArtistDto:
      type: object
      properties: {}
    BaseArtistDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    CreateTrackDto:
      type: object
      properties: {}
    BaseTrackDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        artistId:
          type: string
        albumId:
          type: string
        duration:
          type: number
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateAlbumDto:
      type: object
      properties: {}
    BaseAlbumDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
      required:
        - id
        - name
        - year
        - artistId
    FavoritesResponseDto:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: "#/components/schemas/BaseArtistDto"
        albums:
          type: array
          items:
            $ref: "#/components/schemas/BaseAlbumDto"
        tracks:
          type: array
          items:
            $ref: "#/components/schemas/BaseTrackDto"
      required:
        - artists
        - albums
        - tracks
